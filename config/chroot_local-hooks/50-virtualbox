#!/bin/sh

set -e

echo "Building VirtualBox guest modules"

hw_arch="`dpkg --print-architecture`"
if [ "$hw_arch" != i386 -a "$hw_arch" != amd64 ]; then
   exit 0
fi

available_gcc_version=4.7
wanted_gcc_version=4.8

# the -dkms package must be installed *after* dkms to be properly registered
apt-get install --yes build-essential dkms dpatch

# temporary workaround: pretend the "wanted" GCC is available, so that
# the modules can build.
# /usr/src/linux-headers-3.*-common/scripts/gcc-version.sh
# is the one who says they should be run using that version.
apt-get install --yes gcc-${available_gcc_version}

# Create and install fake GCC package
apt-get install --yes equivs
cat > /root/gcc-${wanted_gcc_version}.control << EOF
Section: devel
Priority: optional
Homepage: https://tails.boum.org/
Standards-Version: 3.6.2

Package: gcc-${wanted_gcc_version}
Maintainer: Tails developers <amnesia@boum.org>
Architecture: all
Description: (Fake) GNU C compiler
 Work around the fact that our Linux headers depend on gcc-${wanted_gcc_version},
 which is unavailable on Wheezy.
EOF
cd /root ; equivs-build /root/gcc-${wanted_gcc_version}.control
dpkg -i gcc-${wanted_gcc_version}_1.0_all.deb
ln -sf /usr/bin/gcc-${available_gcc_version} /usr/bin/gcc-${wanted_gcc_version}
rm /root/gcc-${wanted_gcc_version}.control /root/gcc-${wanted_gcc_version}_1.0_all.deb

# Versions of the module prior to 4.2 do not built on 3.8 and later [Debian #704130].
# Install version from Wheezy backports.
apt-get install --yes virtualbox virtualbox-dkms virtualbox-guest-dkms virtualbox-guest-utils virtualbox-guest-x11 virtualbox-qt

# Have the modules built for every installed kernel
for KERNEL in /boot/vmlinuz-* ; do
   KERNEL_VERSION="$(basename ${KERNEL} | sed -e 's|vmlinuz-||')"
   MODULES_VERSION="$(dpkg-query -W -f='${Version\n}' virtualbox-guest-dkms)"

   # Installing the headers should trigger the building of the modules for that kernel
   apt-get install --yes linux-headers-$KERNEL_VERSION
   # Only build and install if it was not done already
   if [ ! "$(dkms status -k $KERNEL_VERSION -m virtualbox-guest -v $MODULES_VERSION)" ]; then
      dkms build -k $KERNEL_VERSION -m virtualbox-guest -v $MODULES_VERSION
      dkms install -k $KERNEL_VERSION -m virtualbox-guest -v $MODULES_VERSION
   fi

   if [ ! "$(dkms status -k $KERNEL_VERSION -m virtualbox -v $MODULES_VERSION)" ]; then
      dkms build -k $KERNEL_VERSION -m virtualbox -v $MODULES_VERSION
      dkms install -k $KERNEL_VERSION -m virtualbox -v $MODULES_VERSION
   fi
done

# clean the build directories
rm -r /var/lib/dkms/virtualbox-guest/
rm -r /var/lib/dkms/virtualbox/

# virtualbox-{,guest-}dkms's prerm script deletes any previously
# built binary modules; let's delete them before the packages are purged.
rm /var/lib/dpkg/info/virtualbox-guest-dkms.prerm
rm /var/lib/dpkg/info/virtualbox-dkms.prerm

# Also copy the udev rules installed by virtualbox-{,guest-}dkms to enable
# guest additions / kernel modules by default.
cp -a /lib/udev/rules.d/60-virtualbox-guest-dkms.rules /etc/udev/rules.d/
cp -a /lib/udev/rules.d/60-virtualbox-dkms.rules /etc/udev/rules.d/

# remove temporary workaround
rm /usr/bin/gcc-${wanted_gcc_version}
